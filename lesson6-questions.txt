Questions for Lesson 6

1. When you enable CRUD operations on a table in the database, you need to add four things
to your Rails application.  When you generate a scaffold, all four are created.What are they?

A model, route, controller and views

2. When you specify a route in config/routes.rb, you need to include certain information.  What
must be included? In addition, you may specify an additional parameter to create a variable
that describes the route.  How do you do that? What variable is created?

get, post, and delete routes. The / symbol defines the route path. users will take you to the users page in the browser
and the paramater after either gets the id from the user or gets an action like new to create a new user or logon to 
log the user in.


3. What does the Rails db:migrate command do?

table is created keeps track of what migrations have been applied

4. What file do you look at to see the current database schema?

db/schema.rb

5. What command shows the routes?

bin/rails routes

6. How can you start the Rails console? How can you do CRUD operations from the console?

bin/rails console
forum = Forum.new is an example of how you can create a new forum


7. What statements are in erb files that make them different from html files?  What are the
two kinds of special statements, and how are they marked in the erb file? Where are they executed?

the <%= %> signs surrounding your code is one differentiation
the syntax is also different from html

8. Consider this statement: @forum = Forum.new().  Why is Forum capitalized?  Why is @forum not
capitalized? Why is the @ used?

the @ refers to the instance variable @forums in app/controllers/forums_controller
Forum is capitalized because it is a class method of the Forum model class
@forum is named that in the forums_controllers I think that's just conventional naming practices?

9. Consider these statements:

@forum = Forum.new(...)
@forum =Forum.create(...)
@forum.save(...)

What is the difference between Forum.new() and Forum.create()?  Why can't you do Forum.save(...)?

forum.save does an SQL insert and use te ORM to do the SQL for you so it's different from using the class methods
.new takes from an already declared class you created, a subclass of the ApplicationRecord created on default by Ruby
and you can create a forum with the attributes that were declared with its class
.create will return the object and save it to the database while .new only returns it

10. In the forums controller, you have a method called show:

  def show
  end

This is an action method.  It is an action method for only one reason: There is a route
that points to it.  But there's nothing in the method!  It will do the right things
because the default behavior does what is needed.  What does the default behavior
do? 
In config/routes.rb there's a line: get '/users/:id', to: 'users#show', as: 'user'
so it gets the user id

How does it know which forum to show?  
I believe because it's declared under the class ForumsControllers, so any action method will be associated with 
the forum declared in the class

Whenever you have an action method, there is a hash called params that is passed to that method.  
And, in this case, the params hash has a value, params[:id].  
What is the value for this element of the hash? 
this is the id associated with any user that has created a login. Every user gets their own id

How did it get there?
When someone creates a user they are assigned in an id that is associated to that name 




